<Type Name="HttpWebRequest" FullName="System.Net.HttpWebRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2bcbb356421d8771d79a334e95a0d90410dc304d" /><Meta Name="ms.sourcegitcommit" Value="662f143e6be46d519ff8ab4451d543d91e651478" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/18/2018" /><Meta Name="ms.locfileid" Value="53568695" /></Metadata><TypeSignature Language="C#" Value="public class HttpWebRequest : System.Net.WebRequest, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable HttpWebRequest extends System.Net.WebRequest implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpWebRequest" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpWebRequest&#xA;Inherits WebRequest&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpWebRequest : System::Net::WebRequest, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type HttpWebRequest = class&#xA;    inherit WebRequest&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Requests</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebRequest</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.FriendAccessAllowed</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Net.WebRequest" /> クラスの HTTP 固有の実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

> [!IMPORTANT]
>  使用することをお勧めしません`HttpWebRequest`新規の開発。 代わりに、使用、<xref:System.Net.Http.HttpClient?displayProperty=nameWithType>クラス。

 <xref:System.Net.HttpWebRequest>クラスのプロパティのサポートを提供して、メソッド内で定義<xref:System.Net.WebRequest>および追加のプロパティと HTTP を使用するサーバーと直接対話するユーザーを有効にする方法。  
  
 使用しないでください、<xref:System.Net.HttpWebRequest.%23ctor%2A>コンス トラクター。 使用して、<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>新しい初期化<xref:System.Net.HttpWebRequest>オブジェクト。 統一リソース識別子 (URI) スキームが`http://`または`https://`、<xref:System.Net.WebRequest.Create%2A>を返します、<xref:System.Net.HttpWebRequest>オブジェクト。  
  
 <xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドで指定されたリソースへの同期要求、<xref:System.Net.HttpWebRequest.RequestUri%2A>プロパティを返します、<xref:System.Net.HttpWebResponse>応答オブジェクトを格納しています。 によって返されるストリームを使用して、応答データを受け取ることが<xref:System.Net.HttpWebResponse.GetResponseStream%2A>します。 応答オブジェクト、または応答ストリームが閉じている場合は、残りのデータは失われます。 残りのデータが消耗して、次の条件を保持している場合に、応答オブジェクトまたはストリームを閉じるときに、ソケットを後続の要求の再利用する: keep alive またはパイプライン処理要求は、少量のデータのみを受信する必要がありますか残りのデータは、短時間で受信されます。 上記の条件のいずれも保持、または、ドレイン時間を超えた、ソケットが閉じられます。 キープ アライブまたはパイプラインの接続、アプリケーションが EOF まで、ストリームを読み取ることを強くお勧めします。 これにより、ソケットのパフォーマンスが向上しより少ないリソースが使用される結果の後続の要求の再利用します。  
  
 リソースにデータを送信するときに、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを返します。 を<xref:System.IO.Stream>データ送信に使用するオブジェクト。 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>と<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッドは、送信データのストリームへの非同期アクセスを提供します。  
  
 使用したクライアント認証用<xref:System.Net.HttpWebRequest>、クライアント証明書をインストールする必要があります、現在のユーザーの場合は、My 証明書ストア。  
  
 <xref:System.Net.HttpWebRequest>クラスがスローされます、<xref:System.Net.WebException>リソースへのアクセス中にエラーが発生した場合。 <xref:System.Net.WebException.Status%2A?displayProperty=nameWithType>プロパティが含まれています、<xref:System.Net.WebExceptionStatus>エラーの原因を示す値。 ときに<xref:System.Net.WebException.Status%2A?displayProperty=nameWithType>は<xref:System.Net.WebExceptionStatus.ProtocolError?displayProperty=nameWithType>、<xref:System.Net.WebException.Response%2A>プロパティが含まれています、<xref:System.Net.HttpWebResponse>リソースから受信します。  
  
 <xref:System.Net.HttpWebRequest> 一般的な HTTP ヘッダーの値プロパティとして、インターネット リソースに送信される、メソッドで設定またはシステムによって設定を公開します。次の表には、完全な一覧が含まれています。 他のヘッダーを設定することができます、<xref:System.Net.HttpWebRequest.Headers%2A>名前/値ペアとしてプロパティ。 サーバーやキャッシュを変更することがあります要求時にヘッダーを追加することに注意してください。  
  
 次の表では、プロパティ、メソッド、またはシステムのいずれかに設定されている HTTP ヘッダーを示します。  
  
|Header|によってを設定します。|  
|------------|------------|  
|そのまま使用します。|設定、<xref:System.Net.HttpWebRequest.Accept%2A>プロパティ。|  
|Connection|設定、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティ、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティ。|  
|コンテンツの長さ|設定、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティ。|  
|Content-Type|設定、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティ。|  
|予想されます。|設定、<xref:System.Net.HttpWebRequest.Expect%2A>プロパティ。|  
|日付|システムによって現在の日付に設定します。|  
|ホスト|システムによって現在のホスト情報に設定します。|  
|場合の変更-以降|設定、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティ。|  
|範囲|設定、<xref:System.Net.HttpWebRequest.AddRange%2A>メソッド。|  
|Referer|設定、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティ。|  
|転送エンコード|設定、<xref:System.Net.HttpWebRequest.TransferEncoding%2A>プロパティ (、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティである必要があります`true`)。|  
|ユーザー エージェント|設定、<xref:System.Net.HttpWebRequest.UserAgent%2A>プロパティ。|  
  
> [!NOTE]
>  <xref:System.Net.HttpWebRequest> 自動的に登録されます。 呼び出す必要はありません、<xref:System.Net.WebRequest.RegisterPrefix%2A>メソッドを登録する<xref:System.Net.HttpWebRequest?displayProperty=nameWithType>Uri を使用する前に以降`http://`または`https://`します。  
  
 ローカル コンピューターまたはアプリケーション構成ファイルは既定のプロキシを使用することを指定できます。 場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティを指定するからプロキシ設定し、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは、ローカル コンピューターまたはアプリケーション構成ファイルを上書き、<xref:System.Net.HttpWebRequest>インスタンスが指定されたプロキシ設定を使用します。 構成ファイルでプロキシが指定されていない場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは指定されていない、<xref:System.Net.HttpWebRequest>クラスは、ローカル コンピューター上の Internet Explorer から継承されたプロキシ設定を使用します。 Internet Explorer のプロキシ設定がない場合は、要求がサーバーに直接送信されます。  
  
 <xref:System.Net.HttpWebRequest>クラスがワイルドカード文字を Internet Explorer によって直接解析バイパス リストよりも異なる方法で Internet Explorer から継承プロキシ バイ パスの一覧を解析します。 たとえば、<xref:System.Net.HttpWebRequest>クラスでは「nt *」Internet Explorer からのバイパス リストを解析の正規表現として"nt。 $"です。 これは、Internet Explorer のネイティブの動作とは異なります。 これの URL"`http://intxxxxx`"を使用してプロキシを使用しないと、<xref:System.Net.HttpWebRequest>クラスが、Internet Explorer を使用してプロキシをバイパスできません。  
  
> [!NOTE]
>  フレームワークでは、SSL セッションは、キャッシュが作成されるとき、可能であれば、新しい要求のキャッシュされたセッションを再利用しようとします。 最初の要素は、Framework は、SSL セッションを再利用しようとすると、 <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (1 つないかどうか)、または匿名のセッションを再利用しようと<xref:System.Net.HttpWebRequest.ClientCertificates%2A>が空です。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie が既定で無効になります。 Cookie を使用する場合は、使用、 <xref:System.Net.HttpWebRequest.CookieContainer%2A> cookie を有効にするプロパティ。  
  
 .NET Framework 4.6 には、安全でない暗号およびハッシュ アルゴリズムの接続をブロックする、新しいセキュリティ機能が含まれています。 HttpClient、HttpWebRequest、FTPClient、SmtpClient、SslStream などの API を介して TLS/SSL を使用して、.NET Framework 4.6 を対象とするアプリケーションは、既定でセキュリティが強化された動作を取得します。  
  
 開発者は、RC4 サービスを使用した既存 SSL3 サービスまたは TLS 相互運用性を維持するためにこの動作を無効にすることがあります。 [この記事で](https://support.microsoft.com/kb/3069494)新しい動作を無効にするために、コードを変更する方法について説明します。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Net.HttpWebRequest> URI のhttp://www.contoso.com/します。  
  
 [!code-cpp[Classic HttpWebRequest Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">要求された URI または要求をリダイレクトする任意の URI にアクセスします。 関連付けられた列挙体。 <see cref="F:System.Net.NetworkAccess.Connect" /></permission>
    <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a">バージョン 3.5 SP1 における HTTPWebRequest の NTLM 認証への変更</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。 これらのコンストラクターは今後は使用しません。詳細については、「解説」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

どちらも<xref:System.Net.HttpWebRequest>コンス トラクターは廃止され、使用する必要があります。 呼び出す、<xref:System.Net.WebRequest.CreateHttp%2A?displayProperty=nameWithType>新しい初期化<xref:System.Net.HttpWebRequest>オブジェクト。     
  
      ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpWebRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは今後は使用しません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="new System.Net.HttpWebRequest : Uri -&gt; System.Net.HttpWebRequest" Usage="new System.Net.HttpWebRequest uri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpWebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpWebRequest(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="new System.Net.HttpWebRequest : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Net.HttpWebRequest" Usage="new System.Net.HttpWebRequest (serializationInfo, streamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">新しい <see cref="T:System.Net.HttpWebRequest" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="streamingContext">新しい <see cref="T:System.Net.HttpWebRequest" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.HttpWebRequest" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは今後は使用しません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションは、シリアル化を使用する場合、完全な信頼モードで実行する必要があります。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">ネットワーク リソースに無制限のアクセス許可。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML シリアル化および SOAP シリアル化</related>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberSignature Language="F#" Value="override this.Abort : unit -&gt; unit" Usage="httpWebRequest.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースへの要求を取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Abort%2A>メソッドは、リソースへの要求をキャンセルします。 要求が取り消され後の呼び出し、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>、 <xref:System.Net.HttpWebRequest.EndGetResponse%2A>、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、または<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッド、<xref:System.Net.WebException>で、<xref:System.Net.WebException.Status%2A>プロパティに設定<xref:System.Net.WebExceptionStatus.RequestCanceled>します。  
  
 <xref:System.Net.HttpWebRequest.Abort%2A>メソッドは指定されたコールバックを実行して同期的に、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>または<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッド場合、<xref:System.Net.HttpWebRequest.Abort%2A>未処理はこれらの操作のいずれかのメソッドが呼び出されます。 これは、潜在的なデッドロックの問題につながります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを](https://msdn.microsoft.com/library/e993b7c3-087f-45d8-9c02-9dded936d804)します。  
  
   
  
## Examples  
 非同期要求の場合、独自のタイムアウト メカニズムを実装するために、クライアント アプリケーションの役割です。 次のコード例では、これを行う方法を示します。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public string Accept { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Accept" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Property Accept As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Accept { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Accept : string with get, set" Usage="System.Net.HttpWebRequest.Accept" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Accept" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Accept" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 消去する、 `Accept` HTTP のヘッダーを設定、<xref:System.Net.HttpWebRequest.Accept%2A>プロパティを`null`します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.Accept%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_Accept#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Accept/CPP/httpwebrequest_accept.cpp#1)]
 [!code-csharp[HttpWebRequest_Accept#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Accept/CS/httpwebrequest_accept.cs#1)]
 [!code-vb[HttpWebRequest_Accept#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Accept/VB/httpwebrequest_accept.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(int range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int -&gt; unit" Usage="httpWebRequest.AddRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求にバイト範囲ヘッダーを追加します。  
  
 場合`range`が正の値、`range`パラメーターが範囲の開始位置を指定します。 サーバーがデータからの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合`range`は負の値、`range`パラメーターが範囲の終点を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、`range`パラメーターを指定します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 次のようになります (から 99 のバイト位置を開始) の最初の 100 バイトの送信をサーバーが要求する HTTP プロトコル要求に範囲ヘッダーの例:  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `range` -99 パラメーターになります。  
  
 HTTP サーバーでは、Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
   
  
## Examples  
 次のコード例では、要求に範囲ヘッダーを追加します。  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (range As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(long range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int64 -&gt; unit" Usage="httpWebRequest.AddRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求にバイト範囲ヘッダーを追加します。  
  
 場合`range`が正の値、`range`パラメーターが範囲の開始位置を指定します。 サーバーがデータからの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合`range`は負の値、`range`パラメーターが範囲の終点を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、`range`パラメーターを指定します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 次のようになります (から 99 のバイト位置を開始) の最初の 100 バイトの送信をサーバーが要求する HTTP プロトコル要求に範囲ヘッダーの例:  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `range` -99 パラメーターになります。  
  
 HTTP サーバーでは、Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (from As Integer, to As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(int from, int to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int * int -&gt; unit" Usage="httpWebRequest.AddRange (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int32" />
        <Parameter Name="to" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求にバイト範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、`from`パラメーターは 0 として指定し、`to`パラメーターは 99 として指定します。 範囲指定子は、このメソッドによって"bytes"として自動的に設定されます。  
  
 HTTP サーバーでは、Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
   
  
## Examples  
 次のコード例では、要求に範囲ヘッダーを追加します。  
  
 [!code-cpp[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/cpp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cpp/source.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/cs/source.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.AddRange2#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.net.httpwebrequest.addrange2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
- または - 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (from As Long, to As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(long from, long to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : int64 * int64 -&gt; unit" Usage="httpWebRequest.AddRange (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Int64" />
        <Parameter Name="to" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求にバイト範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、`from`パラメーターは 0 として指定し、`to`パラメーターは 99 として指定します。 範囲指定子は、このメソッドによって"bytes"として自動的に設定されます。  
  
 HTTP サーバーでは、Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, range As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, int range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="range" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求に範囲ヘッダーを追加します。  
  
 場合`range`が正の値、`range`パラメーターが範囲の開始位置を指定します。 サーバーがデータからの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合`range`は負の値、`range`パラメーターが範囲の終点を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、`range`パラメーターを指定します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 `rangeSpecifier`パラメーターは通常として指定する"bytes"、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子であるためです。 設定、`rangeSpecifier`を他のなんらかの文字列パラメーターは、バイト数 (バイト範囲指定子、IETF によって RFC 2616 で定義されている) 以外のカスタムの範囲指定子のサポートを使用できます。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `range` -99 パラメーターになります。  
  
 HTTP サーバーでは、応答で Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 range) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, range As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, long range);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int64 -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="range" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="range">範囲の先頭または末尾。</param>
        <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求に範囲ヘッダーを追加します。  
  
 場合`range`が正の値、`range`パラメーターが範囲の開始位置を指定します。 サーバーがデータからの送信を開始する必要があります、 `range` HTTP エンティティのデータの末尾に指定されたパラメーター。  
  
 場合`range`は負の値、`range`パラメーターが範囲の終点を指定します。 サーバーが HTTP のエンティティにデータの先頭からのデータの送信を開始する必要があります、`range`パラメーターを指定します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 `rangeSpecifier`パラメーターは通常として指定する"bytes"、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子であるためです。 設定、`rangeSpecifier`を他のなんらかの文字列パラメーターは、バイト数 (バイト範囲指定子、IETF によって RFC 2616 で定義されている) 以外のカスタムの範囲指定子のサポートを使用できます。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、 `range` -99 パラメーターになります。  
  
 HTTP サーバーでは、応答で Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, int from, int to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int32 from, int32 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, from As Integer, to As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, int from, int to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int * int -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="from" Type="System.Int32" />
        <Parameter Name="to" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求に範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 `rangeSpecifier`パラメーターは通常として指定する"bytes"、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子であるためです。 設定、`rangeSpecifier`を他のなんらかの文字列パラメーターは、バイト数 (バイト範囲指定子、IETF によって RFC 2616 で定義されている) 以外のカスタムの範囲指定子のサポートを使用できます。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、`from`パラメーターが 0 になります、`to`パラメーターが 99 になります。  
  
 HTTP サーバーでは、応答で Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept-ranges ヘッダーで指定した文字列は、範囲指定子内で指定される、`rangeSpecifier`をこのメソッドのパラメーター。  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
- または - 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (string rangeSpecifier, long from, long to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(string rangeSpecifier, int64 from, int64 to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (rangeSpecifier As String, from As Long, to As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::String ^ rangeSpecifier, long from, long to);" />
      <MemberSignature Language="F#" Value="member this.AddRange : string * int64 * int64 -&gt; unit" Usage="httpWebRequest.AddRange (rangeSpecifier, from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rangeSpecifier" Type="System.String" />
        <Parameter Name="from" Type="System.Int64" />
        <Parameter Name="to" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="rangeSpecifier">範囲の説明。</param>
        <param name="from">データの送信を開始する位置。</param>
        <param name="to">データの送信を終了する位置。</param>
        <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.AddRange%2A?displayProperty=nameWithType>メソッドが、要求に範囲ヘッダーを追加します。  
  
 HTTP のすべてのエンティティはバイトのシーケンスとして HTTP メッセージで示されるために、バイト範囲の概念は、任意の HTTP エンティティの有効です。 ただし、すべてのクライアントとサーバーがバイト範囲の操作をサポートする必要があります。  
  
 要求に範囲ヘッダーには、HTTP エンティティの指定したバイト範囲の一部を受信するのみことを要求するクライアントができます。 範囲ヘッダーの要求をサポートするためには、サーバーは必要はありません。  
  
 `rangeSpecifier`パラメーターは通常として指定する"bytes"、これは、ほとんどの HTTP サーバーによって認識される唯一の範囲指定子であるためです。 設定、`rangeSpecifier`を他のなんらかの文字列パラメーターは、バイト数 (バイト範囲指定子、IETF によって RFC 2616 で定義されている) 以外のカスタムの範囲指定子のサポートを使用できます。  
  
 最初の 100 バイトの要求になる HTTP プロトコル要求に範囲ヘッダーの例は、次のようになります  
  
 `Range: bytes=0-99\r\n\r\n`  
  
 この例で、 `rangeSpecifier` "bytes"としてパラメーターを指定すると、`from`パラメーターが 0 になります、`to`パラメーターが 99 になります。  
  
 HTTP サーバーでは、応答で Accept-ranges ヘッダーを持つ範囲ヘッダーのサポートを示します。 バイト範囲をサポートしているサーバーから Accept-ranges ヘッダーの例には、次のようになります。  
  
 `Accept-Ranges: bytes\r\n\r\n`  
  
 Accept-ranges ヘッダーで指定した文字列は、範囲指定子内で指定される、`rangeSpecifier`をこのメソッドのパラメーター。  
  
 サーバーからの応答のヘッダーに、Accept-ranges ヘッダーを受信しない場合は、範囲ヘッダーはいないサーバーにサポートします。 範囲をサポートしていませんが、Accept-ranges ヘッダーを認識しているサーバーから Accept-ranges ヘッダーの例としては、次のようになります。  
  
 `Accept-Ranges: none\r\n\r\n`  
  
 全体の要求に関連付けられた HTTP ヘッダーだけが解析され、プロパティを使用できるように、範囲の要求から応答を受信するときに、<xref:System.Net.HttpWebResponse>クラス。 各範囲に関連付けられているヘッダーが応答で返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="rangeSpecifier" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="from" /> は <paramref name="to" /> より大きい  
  
または 
 <paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="rangeSpecifier" /> が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
        <altmember cref="Overload:System.Net.HttpWebRequest.AddRange" />
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Address { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : Uri" Usage="System.Net.HttpWebRequest.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に実際に応答するインターネット リソースの URI (Uniform Resource Identifier) を取得します。</summary>
        <value>要求に実際に応答するインターネット リソースを識別する <see cref="T:System.Uri" />。 既定値は、<see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドが要求を初期化するために使用する URI です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Address%2A>プロパティは、要求時に発生するすべてのリダイレクトが完了した後、URI に設定されます。  
  
 元の要求の URI に保持される、<xref:System.Net.HttpWebRequest.RequestUri%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.HttpWebRequest>オブジェクト`req`の値を設定は、要求を満たすために別の場所にリダイレクトされ、`hasChanged`変数を`true`場合は、要求がリダイレクトされましたそれ以外の場合`hasChanged`。に設定されている`false`します。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowAutoRedirect">
      <MemberSignature Language="C#" Value="public virtual bool AllowAutoRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowAutoRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowAutoRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowAutoRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowAutoRedirect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowAutoRedirect : bool with get, set" Usage="System.Net.HttpWebRequest.AllowAutoRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求がリダイレクト応答に従うかどうかを示す値を取得または設定します。</summary>
        <value>要求がインターネット リソースからのリダイレクト応答に自動的に従う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>に`true`リソースの新しい場所に自動的に HTTP リダイレクト ヘッダーを要求する場合。 リダイレクト先の最大数は設定、<xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A>プロパティ。  
  
 場合<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>に設定されている`false`399 に 300 から HTTP 状態コードですべて応答がアプリケーションに返されます。  
  
 自動リダイレクトに Authorization ヘッダーがオフになって、<xref:System.Net.HttpWebRequest>自動的にリダイレクトされる場所を再認証を試みます。 つまりで実際には、リダイレクトが発生する可能性がある場合に、アプリケーションが承認ヘッダーにカスタムの認証情報を配置できません。 代わりに、アプリケーションを実装し、カスタム認証モジュールを登録する必要があります。 <xref:System.Net.AuthenticationManager?displayProperty=nameWithType>関連クラスがカスタム認証モジュールを実装するために使用されます。 <xref:System.Net.AuthenticationManager.Register%2A?displayProperty=nameWithType>メソッドは、カスタム認証モジュールを登録します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>リダイレクト応答に従うへの要求を有効にするプロパティ。  
  
 [!code-cpp[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CPP/httpwebrequest_allowautoredirect.cpp#2)]
 [!code-csharp[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/CS/httpwebrequest_allowautoredirect.cs#2)]
 [!code-vb[HttpWebRequest_AllowAutoRedirect#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowAutoRedirect/VB/httpwebrequest_allowautoredirect.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowReadStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowReadStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowReadStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowReadStreamBuffering : bool with get, set" Usage="System.Net.HttpWebRequest.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから受け取ったデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースから受信したデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public virtual bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowWriteStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowWriteStreamBuffering : bool with get, set" Usage="System.Net.HttpWebRequest.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースに送信するデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A>は`true`要求のリダイレクトまたは認証が発生した場合は再送信する準備ができているように、データはメモリ内バッファーします。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.AllowWriteStreamBuffering%2A>プロパティをデータのバッファリングを無効にします。  
  
 [!code-cpp[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CPP/httpwebrequest_allowwritestreambuffering.cpp#1)]
 [!code-csharp[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/CS/httpwebrequest_allowwritestreambuffering.cs#1)]
 [!code-vb[HttpWebRequest_AllowWriteStreamBuffering#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_AllowWriteStreamBuffering/VB/httpwebrequest_allowwritestreambuffering.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>設定<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" />に<see langword="true" />データ バッファーが使用可能なメモリを使用するために、大規模なデータセットをアップロードするときにパフォーマンスの問題が発生する可能性があります。</para></block>
      </Docs>
    </Member>
    <Member MemberName="AutomaticDecompression">
      <MemberSignature Language="C#" Value="public System.Net.DecompressionMethods AutomaticDecompression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.DecompressionMethods AutomaticDecompression" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.AutomaticDecompression" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomaticDecompression As DecompressionMethods" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::DecompressionMethods AutomaticDecompression { System::Net::DecompressionMethods get(); void set(System::Net::DecompressionMethods value); };" />
      <MemberSignature Language="F#" Value="member this.AutomaticDecompression : System.Net.DecompressionMethods with get, set" Usage="System.Net.HttpWebRequest.AutomaticDecompression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.DecompressionMethods</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される圧縮解除の種類を取得または設定します。</summary>
        <value>A<see cref="T:System.Net.DecompressionMethods" />のために使用される圧縮解除の種類を示すオブジェクト。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">オブジェクトの現在の状態では、このプロパティを設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRequestStream">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetRequestStream(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginGetRequestStream (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginGetRequestStream(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginGetRequestStream : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpWebRequest.BeginGetRequestStream (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を開始します。</summary>
        <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッドは、データを送信するために使用する、ストリームの非同期要求を開始、<xref:System.Net.HttpWebRequest>します。 非同期コールバック メソッドを使用して、<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>実際のストリームを返すメソッド。  
  
 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッドがいくつかの同期のセットアップ タスク (DNS の解決、プロキシの検出、および例については、TCP ソケット接続) をこのメソッドが非同期になる前に完了する必要があります。 その結果、このメソッド呼び出さないでユーザー インターフェイス (UI) スレッドでのエラーがスローされる例外の前に、初期同期のセットアップ タスクを完了する (ネットワーク設定によっては数分) までのかなりの時間がかかる場合がありますので、またはメソッドは成功します。  
  
 スレッド プールの詳細については、次を参照してください。[マネージ スレッド プール](~/docs/standard/threading/the-managed-thread-pool.md)します。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出す場合、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッドを使用する必要がある、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>をストリームのインスタンスの非同期要求を作成するメソッド。  
  
 [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが使用中です。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
- または - 
スレッド プールは、スレッドを使い切りました。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「[.NET Compact Framework のネットワーク プログラミング](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx)」をご覧ください。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="BeginGetResponse">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginGetResponse(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginGetResponse (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginGetResponse(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginGetResponse : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpWebRequest.BeginGetResponse (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><see cref="T:System.AsyncCallback" /> デリゲート</param>
        <param name="state">この要求に対して使用する状態オブジェクト。</param>
        <summary>インターネット リソースへの非同期要求を開始します。</summary>
        <returns>応答の非同期要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドは、インターネット リソースからの応答の非同期要求を開始します。 非同期コールバック メソッドを使用して、<xref:System.Net.HttpWebRequest.EndGetResponse%2A>メソッドを実際に返す<xref:System.Net.WebResponse>します。  
  
 A<xref:System.Net.ProtocolViolationException>プロパティに設定されている場合に、いくつかのケースでスローされた、<xref:System.Net.HttpWebRequest>クラスが競合しています。 この例外は、アプリケーションが設定されている場合に発生します。、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティおよび<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティを`true`、し、HTTP GET 要求を送信します。 この例外は、アプリケーションが、これはサポートされていませんのみ HTTP 1.0 プロトコルをサポートしているサーバーにチャンクを送信しようとした場合に発生します。 この例外は、アプリケーション設定がないデータを送信しようとする場合に発生します、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティまたは<xref:System.Net.HttpWebRequest.SendChunked%2A>は`false`バッファリングを無効にすると、キープア ライブ接続で (、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティは`true`)。`.`  
  
 場合、<xref:System.Net.WebException>がスローされると、使用して、<xref:System.Net.WebException.Response%2A>と<xref:System.Net.WebException.Status%2A>サーバーからの応答を確認するには、例外のプロパティ。  
  
 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドがいくつかの同期のセットアップ タスク (DNS の解決、プロキシの検出、および例については、TCP ソケット接続) をこのメソッドが非同期になる前に完了する必要があります。 その結果、このメソッド呼び出さないでユーザー インターフェイス (UI) スレッドでのエラーがスローされる例外の前に、初期同期のセットアップ タスクを完了する (ネットワーク設定によっては数分) までのかなりの時間がかかる場合がありますので、またはメソッドは成功します。  
  
 スレッド プールの詳細については、次を参照してください。[マネージ スレッド プール](~/docs/standard/threading/the-managed-thread-pool.md)します。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出す場合、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッドを使用する必要がある、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [ &#91; \<topic://conUsingNetworkTracing >&#93;](https://msdn.microsoft.com/library/e993b7c3-087f-45d8-9c02-9dded936d804)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドをインターネット リソースの非同期要求を行います。  
  
> [!NOTE]
>  非同期要求の場合、独自のタイムアウト メカニズムを実装するために、クライアント アプリケーションの役割です。 次のコード例では、これを行う方法を示します。  
  
 [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CPP/begingetresponse.cpp#1)]
 [!code-csharp[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/CS/begingetresponse.cs#1)]
 [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.HttpWebRequest.BeginGetResponse/VB/begingetresponse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。  
  
- または - 
スレッド プールは、スレッドが不足しています。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
または 
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドが 呼び出されています。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ClientCertificates" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientCertificates As X509CertificateCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ ClientCertificates { System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ get(); void set(System::Security::Cryptography::X509Certificates::X509CertificateCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificates : System.Security.Cryptography.X509Certificates.X509CertificateCollection with get, set" Usage="System.Net.HttpWebRequest.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求に関連付けられているセキュリティ証明書のコレクションを取得または設定します。</summary>
        <value>この要求に関連付けられているセキュリティ証明書を格納している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションでは、コレクションに証明書を追加できますが、それへのアクセス権がないです。 コレクション内の証明書を使用するには、アプリケーションは、証明書を発行したエンティティと同じアクセス権が必要です。  
  
> [!NOTE]
>  フレームワークでは、SSL セッションは、キャッシュが作成されるとき、可能であれば、新しい要求のキャッシュされたセッションを再利用しようとします。 最初の要素は、Framework は、SSL セッションを再利用しようとすると、 <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (1 つないかどうか)、または匿名のセッションを再利用しようと<xref:System.Net.HttpWebRequest.ClientCertificates%2A>が空です。  
  
> [!NOTE]
>  パフォーマンス向上のためにクライアント証明書を追加することはできません、<xref:System.Net.HttpWebRequest>サーバーが要求することがわかっていない限り、します。  
>   
>  クライアント証明書ストアに証明書を列挙する方法を示すコード例を参照してください、<xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection>クラス。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public string Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Connection" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Connection { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Connection : string with get, set" Usage="System.Net.HttpWebRequest.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Connection" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Connection" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要求の送信、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティとしてインターネット リソースを`Connection`HTTP ヘッダー。 場合の値、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティは`true`、「キープ アライブ」の値の末尾に追加、`Connection`ヘッダー。  
  
 消去する、 `Connection` HTTP のヘッダーを設定、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティを`null`します。  
  
 変更、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティを呼び出すことによって、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、または<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Connection%2A>接続 HTTP ヘッダーの値を設定するプロパティ。  
  
 [!code-cpp[HttpWebRequest_Connection#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest_Connection#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest_Connection#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.Connection" /> の値が Keep-alive または Close に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionGroupName">
      <MemberSignature Language="C#" Value="public override string ConnectionGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ConnectionGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectionGroupName : string with get, set" Usage="System.Net.HttpWebRequest.ConnectionGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する接続グループの名前を取得または設定します。</summary>
        <value>この要求に対して使用する接続グループの名前。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>プロパティは、接続グループの要求に関連付けることができます。 これは、機能は、アプリケーションは、データベース サーバーから顧客情報を取得する Web サイトなどのさまざまなユーザーの 1 つのサーバーに要求を行うときに便利です。  
  
   
  
## Examples  
 次のコード例は、ユーザー情報を使用するいると仮定すると、接続グループを形成する方法を表示する、変数`username`、 `password`、および`domain`このコードを呼び出す前に、アプリケーションによって設定されます。  
  
 [!code-cpp[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.ConnectionGroupName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.ConnectionGroupName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>各接続グループは、サーバーの追加の接続を作成します。 これが原因で設定の接続の数を超えた場合、<see cref="P:System.Net.ServicePoint.ConnectionLimit" />そのサーバーのプロパティ。</para></block>
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
        <altmember cref="P:System.Net.WebRequest.ConnectionGroupName" />
        <related type="Article" href="~/docs/framework/network-programming/connection-grouping.md">接続のグループ化</related>
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public override long ContentLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContentLength As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long ContentLength { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ContentLength : int64 with get, set" Usage="System.Net.HttpWebRequest.ContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Content-length" /> HTTP ヘッダーを取得または設定します。</summary>
        <value>インターネット リソースに送信するデータのバイト数。 既定値は -1 です。このプロパティが設定されていないこと、および送信する要求データが存在しないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティとして送信する値を格納、 `Content-length` HTTP ヘッダー、要求を使用します。  
  
 -1 以外の値、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティは、要求がデータをアップロードしに設定するデータをアップロードするメソッドのみが許可されることを示します、<xref:System.Net.HttpWebRequest.Method%2A>プロパティ。  
  
 後に、<xref:System.Net.HttpWebRequest.ContentLength%2A>値に設定されて、そのバイト数に書き込まれると、要求のストリームの呼び出しによって返される、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドまたはその両方、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>と<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッド。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.ContentLength%2A>通知されている文字列の長さのプロパティ。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">新規 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 値が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public override string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string with get, set" Usage="System.Net.HttpWebRequest.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Content-type" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Content-type" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContentType%2A>プロパティには、要求のメディアの種類が含まれています。 割り当てられた値、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティが要求を送信するとき、既存の内容を置き換える、 `Content-type` HTTP ヘッダー。  
  
 消去する、 `Content-type` HTTP のヘッダーを設定、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティを`null`します。  
  
> [!NOTE]
>  このプロパティの値が格納されている<xref:System.Net.WebHeaderCollection>します。 場合<xref:System.Net.WebHeaderCollection>が設定された場合、プロパティの値は失われます。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_ContentLength#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#1)]
 [!code-csharp[HttpWebRequest_ContentLength#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#1)]
 [!code-vb[HttpWebRequest_ContentLength#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpContinueDelegate ContinueDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueDelegate As HttpContinueDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpContinueDelegate ^ ContinueDelegate { System::Net::HttpContinueDelegate ^ get(); void set(System::Net::HttpContinueDelegate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueDelegate : System.Net.HttpContinueDelegate with get, set" Usage="System.Net.HttpWebRequest.ContinueDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpContinueDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから HTTP 100-continue 応答を受信したときに呼び出されるデリゲート メソッドを取得または設定します。</summary>
        <value>インターネット リソースから HTTP Continue 応答が返されたときに実行されるコールバック メソッドを実装するデリゲート。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ContinueDelegate%2A>プロパティは、クライアントは、100 を受信したときに呼び出すコールバック メソッドを指定の応答を続行します。  
  
 ときに、<xref:System.Net.HttpWebRequest.ContinueDelegate%2A>プロパティが設定されて、クライアントは、デリゲートを呼び出すたびにプロトコルの種類の応答<xref:System.Net.HttpStatusCode.Continue?displayProperty=nameWithType>(100) を受信します。 これは、クライアントがインターネット リソースから受信したデータの状態を表示する場合に便利です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
      </Docs>
    </Member>
    <Member MemberName="ContinueTimeout">
      <MemberSignature Language="C#" Value="public int ContinueTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContinueTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ContinueTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ContinueTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueTimeout : int with get, set" Usage="System.Net.HttpWebRequest.ContinueTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>100 回の続行まで待機するミリ秒単位のタイムアウト値をサーバーから取得または設定します。</summary>
        <value>100 回の続行まで待機するミリ秒単位のタイムアウト値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、100-タイムアウトになると、エンティティ本体を送信する前に、応答を受信しました。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieContainer">
      <MemberSignature Language="C#" Value="public virtual System.Net.CookieContainer CookieContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.CookieContainer CookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.CookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CookieContainer As CookieContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::CookieContainer ^ CookieContainer { System::Net::CookieContainer ^ get(); void set(System::Net::CookieContainer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CookieContainer : System.Net.CookieContainer with get, set" Usage="System.Net.HttpWebRequest.CookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.CookieContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に関連付けられているクッキーを取得または設定します。</summary>
        <value>この要求に関連付けられているクッキーを格納している <see cref="T:System.Net.CookieContainer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.CookieContainer%2A>プロパティのインスタンスを提供する、<xref:System.Net.CookieContainer>この要求に関連付けられているクッキーを格納するクラス。  
  
 <xref:System.Net.HttpWebRequest.CookieContainer%2A> `null`既定。 割り当てる必要があります、<xref:System.Net.CookieContainer>オブジェクトで返されたクッキーを使用してプロパティを<xref:System.Net.HttpWebResponse.Cookies%2A>のプロパティ、<xref:System.Net.HttpWebResponse>によって返される、<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッド。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie が既定で無効になります。 Cookie を使用する場合は、使用、 <xref:System.Net.HttpWebRequest.CookieContainer%2A> cookie を有効にするプロパティ。  
  
   
  
## Examples  
 次のコード例では、URL に要求を送信し、応答で返されたクッキーを表示します。  
  
 [!code-cpp[NCLCookies#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCookies/CPP/cookiessnippets.cpp#1)]
 [!code-csharp[NCLCookies#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCookies/CS/cookiessnippets.cs#1)]
 [!code-vb[NCLCookies#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLCookies/VB/cookiessnippets.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CookieContainer" />
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials with get, set" Usage="System.Net.HttpWebRequest.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する認証情報を取得または設定します。</summary>
        <value>要求と関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Credentials%2A>プロパティには、要求の作成者を識別するために認証情報が含まれています。 <xref:System.Net.HttpWebRequest.Credentials%2A>プロパティには、いずれかを指定できる、 <xref:System.Net.NetworkCredential>、する場合、ユーザー、パスワード、およびドメインの情報に含まれているで、<xref:System.Net.NetworkCredential>オブジェクトは、要求を認証するために使用することもできます、<xref:System.Net.CredentialCache>その場合、Uniform Resource要求の識別子 (URI) は、要求の認証に使用するには、ユーザー、パスワード、およびドメイン情報の決定に使用されます。  
  
 ほとんどのクライアント シナリオで使用する必要があります、<xref:System.Net.CredentialCache.DefaultCredentials%2A>プロパティで、現在ログオンしているユーザーの資格情報が含まれています。 これを行うには、設定、<xref:System.Net.WebClient.UseDefaultCredentials%2A>プロパティを`true`このプロパティを設定する代わりにします。  
  
 場合、<xref:System.Net.HttpWebRequest>クラスは、ASP.NET アプリケーション内の資格情報などの中間層アプリケーションで使用されている、<xref:System.Net.CredentialCache.DefaultCredentials%2A>プロパティは、ASP ページ (サーバー側の資格情報) を実行しているアカウントに属しています。 通常、要求が行われる要因となったクライアントの資格情報をこのプロパティを設定します。  
  
> [!NOTE]
>  別のユーザーの権限を借用する、ntlm 認証を使用できません。 Kerberos は、権限借用をサポートするために特別に構成されている必要があります。  
  
 1 つまたは複数の認証方法に HttpWebRequest を制限する、<xref:System.Net.CredentialCache>クラスし、資格情報を 1 つまたは複数の認証スキームにバインドします。  
  
 サポートされている認証スキームには、Digest、Negotiate、Kerberos、NTLM、および Basic が含まれます。  
  
 セキュリティ上の理由、自動的にリダイレクトに従うとき、リダイレクトの機能に含まれる使用する資格情報を格納、<xref:System.Net.CredentialCache>し、このプロパティに割り当てます。 このプロパティが自動的に設定されます`null`以外のものが含まれている場合、リダイレクト時に、<xref:System.Net.CredentialCache>します。 自動的に設定するこのプロパティの値を持つ`null`これらの条件下で、意図しない宛先に送信される資格情報を防止します。
  
## Examples  
 次のコード例では、要求の資格情報を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Date" />
      <MemberSignature Language="VB.NET" Value="Public Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime with get, set" Usage="System.Net.HttpWebRequest.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求で使用する <see langword="Date" /> HTTP ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Date ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日付ヘッダーが場合`null`、戻り値に設定されます<xref:System.DateTime.MinValue?displayProperty=nameWithType>します。  
  
 <xref:System.Net.HttpWebRequest.Date%2A>プロパティは、標準<xref:System.DateTime?displayProperty=nameWithType>オブジェクトし、含めることができます、<xref:System.DateTimeKind?displayProperty=nameWithType>フィールド<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、または<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用する場合は、時間の任意の種類を設定することができます、<xref:System.Net.HttpWebRequest.Date%2A>プロパティ。 場合<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>を設定または取得するには、<xref:System.Net.HttpWebRequest.Date%2A>プロパティがあると見なされます<xref:System.DateTimeKind.Local?displayProperty=nameWithType>(ローカル時刻)。  
  
 内のクラス、<xref:System.Net>名前空間常に書き出すこと、 <xref:System.Net.HttpWebRequest.Date%2A> gmt 時刻 (Utc) 形式を使用して標準の形式で転送中にネットワーク上でのプロパティ。  
  
 場合、<xref:System.Net.HttpWebRequest.Date%2A>プロパティに設定されて<xref:System.DateTime.MinValue?displayProperty=nameWithType>、`Date`から HTTP のヘッダーが削除された、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティおよび<xref:System.Net.WebHeaderCollection>します。  
  
 場合、<xref:System.Net.HttpWebRequest.Date%2A>プロパティは<xref:System.DateTime.MinValue?displayProperty=nameWithType>、これが示す、`Date`に HTTP ヘッダーが含まれていない、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティと<xref:System.Net.WebHeaderCollection>します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
 場合、<xref:System.Net.HttpWebRequest.Date%2A>設定が送信しようと、<xref:System.Net.HttpWebRequest>本文なしで、<xref:System.Net.ProtocolViolationException?displayProperty=nameWithType>によってスローされます、 <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、および<xref:System.Net.HttpWebRequest.EndGetResponse%2A>メソッド。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCachePolicy">
      <MemberSignature Language="C#" Value="public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.Cache.RequestCachePolicy DefaultCachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultCachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultCachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::Cache::RequestCachePolicy ^ DefaultCachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCachePolicy : System.Net.Cache.RequestCachePolicy with get, set" Usage="System.Net.HttpWebRequest.DefaultCachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
        <value>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定すると、HTTP および HTTPS スキームを指定したポリシーが登録されます。 場合、このポリシーはこの要求に対して使用します。  
  
 ない<xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=nameWithType>プロパティのこの要求に指定します。  
  
または
  
 コンピューターとアプリケーション構成ファイルは、統一リソース識別子 (URI) に適用可能なキャッシュ ポリシーは、この要求の作成に使用を指定していません。  
  
 キャッシュ ポリシーでは、要求されたリソースをリソースのホスト コンピューターに要求を送信するのではなくキャッシュから取得できるかどうかを決定します。  
  
 リソースのコピーは、リソースの応答ストリームが取得され、ストリームの末尾に読み込まれる場合にのみ、キャッシュに追加されます。 同じリソースに対してもう 1 つの要求は、この要求のキャッシュ ポリシー レベルによって、キャッシュされたコピーを使用できます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">ネットワーク リソースに無制限のアクセス許可。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Net.Cache.RequestCachePolicy" />
        <altmember cref="T:System.Net.Cache.HttpRequestCacheLevel" />
        <altmember cref="T:System.Net.Cache.RequestCacheLevel" />
        <altmember cref="P:System.Net.WebRequest.CachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumErrorResponseLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumErrorResponseLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumErrorResponseLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultMaximumErrorResponseLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int DefaultMaximumErrorResponseLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumErrorResponseLength : int with get, set" Usage="System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP エラー応答の既定の最大長を取得または設定します。</summary>
        <value>HTTP エラー応答の既定の最大長。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public static int DefaultMaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 DefaultMaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultMaximumResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int DefaultMaximumResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumResponseHeadersLength : int with get, set" Usage="System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> プロパティの既定値を取得または設定します。</summary>
        <value>受信した応答ヘッダーの KB (1024 バイト) 単位の既定の最大長。 既定の構成ファイルは、この値を 64 KB に設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 応答ヘッダーの長さは、応答のステータス行と HTTP プロトコルの一部として受信したすべての余分な制御文字を受信します。 値-1 は、受信した応答ヘッダーに制限は適用されません。値 0 は、すべての要求が失敗することを意味します。  
  
 この値は、構成ファイルにも変更できます。 このプロパティの影響を設定して上書きできます、<xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A>プロパティのインスタンスを<xref:System.Net.HttpWebRequest>クラス。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値は -1 と等しくなく、0 未満です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndGetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndGetRequestStream (asyncResult As IAsyncResult) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndGetRequestStream : IAsyncResult -&gt; System.IO.Stream" Usage="httpWebRequest.EndGetRequestStream asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッドによって開始されたストリームの非同期要求が完了すると、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッド。 後に、<xref:System.IO.Stream>オブジェクトが返されたを使用してデータを送信することができます、<xref:System.Net.HttpWebRequest>を使用して、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType>メソッド。  
  
> [!NOTE]
>  値を設定する必要があります、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティ データをストリームに書き込む前にします。  
  
> [!CAUTION]
>  呼び出す必要があります、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、接続から実行されるアプリケーションをします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>ストリームのインスタンスの非同期要求を終了するメソッド。  
  
 [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CPP/httpwebrequest_begingetrequeststream.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/CS/httpwebrequest_begingetrequeststream.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetRequestStream/VB/httpwebrequest_begingetrequeststream.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
この要求の処理中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndGetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext context);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult, [out] class System.Net.TransportContext&amp; context) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetRequestStream (asyncResult As IAsyncResult, ByRef context As TransportContext) As Stream" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::TransportContext ^ % context);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
      <MemberSignature Language="C#" Value="public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext transportContext);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream EndGetRequestStream(class System.IAsyncResult asyncResult, [out] class System.Net.TransportContext&amp; transportContext) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetRequestStream (asyncResult As IAsyncResult, ByRef transportContext As TransportContext) As Stream" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ EndGetRequestStream(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::TransportContext ^ % transportContext);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.EndGetRequestStream : IAsyncResult *  -&gt; System.IO.Stream" Usage="httpWebRequest.EndGetRequestStream (asyncResult, transportContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" />
        <Parameter Name="context" Type="System.Net.TransportContext" RefType="out" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-2.0;netcore-2.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.8;netcore-2.2" />
        <Parameter Name="transportContext" Type="System.Net.TransportContext" RefType="out" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="asyncResult">ストリームの保留中の要求。</param>
        <param name="context"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <param name="transportContext"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトに対する非同期要求を終了し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A>メソッドによって開始されたストリームの非同期要求が完了すると、<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッド呼び出し力、<xref:System.Net.TransportContext>ストリームに関連付けられています。 後に、<xref:System.IO.Stream>オブジェクトが返されたを使用してデータを送信することができます、<xref:System.Net.HttpWebRequest>を使用して、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType>メソッド。  
  
 拡張保護付き統合 Windows 認証を使用する一部のアプリケーションで使用されるトランスポート層をクエリできるようにする必要があります<xref:System.Net.HttpWebRequest>基になる TLS チャネルからチャネル バインディング トークン (CBT) を取得するためです。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドは要求本文を使用する HTTP メソッドのこの情報へのアクセスを提供します (`POST`と`PUT`要求)。 これは、アプリケーションが独自の認証の実装は、CBT へのアクセスを必要がある場合にのみ必要です。  
  
> [!NOTE]
>  値を設定する必要がある場合、<xref:System.Net.HttpWebRequest.ContentLength%2A>ストリームを取得して、データを書き込む前に、プロパティ、し、これを行う必要があります。  
  
> [!CAUTION]
>  呼び出す必要があります、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、接続から実行されるアプリケーションをします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
        <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
- または - 
この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">統合 Windows 認証と拡張保護</related>
      </Docs>
    </Member>
    <Member MemberName="EndGetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse EndGetResponse(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndGetResponse (asyncResult As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::WebResponse ^ EndGetResponse(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndGetResponse : IAsyncResult -&gt; System.Net.WebResponse" Usage="httpWebRequest.EndGetResponse asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">応答の保留中の要求。</param>
        <summary>インターネット リソースへの非同期要求を終了します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.EndGetResponse%2A>メソッドの呼び出しによって開始されたインターネット リソースの非同期要求が完了すると、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッド。  
  
> [!CAUTION]
>  呼び出す必要があります、<xref:System.Net.HttpWebResponse.Close%2A>ストリームを閉じるし、接続を解放するメソッド。 そのために失敗した接続が不足するアプリケーションがあります。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.EndGetResponse%2A>メソッドをインターネット リソースの非同期要求を終了します。  
  
 [!code-cpp[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CPP/httpwebrequest_begingetresponse.cpp#2)]
 [!code-csharp[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/CS/httpwebrequest_begingetresponse.cs#2)]
 [!code-vb[HttpWebRequest_BeginGetResponse#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_BeginGetResponse/VB/httpwebrequest_begingetresponse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult." /> を使用して呼び出されました。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> プロパティが 0 より大きいですが、要求ストリームにデータが書き込まれていません。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
- または - 
この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public string Expect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expect" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Expect" />
      <MemberSignature Language="VB.NET" Value="Public Property Expect As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expect { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Expect : string with get, set" Usage="System.Net.HttpWebRequest.Expect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Expect" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Expect" /> HTTP ヘッダーの内容。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note"><para>  
 このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" /> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para></block></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><see langword="Expect" /> は、部分文字列として "100-continue" を含む文字列に設定されます。</exception>
        <altmember cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" />
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="httpWebRequest.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Net.WebRequest" /> インスタンスのハッシュ値を返します。</summary>
        <returns>整数ハッシュ値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
GetHashCode メソッドでは、web 要求のハッシュ コードを返します。 この値は、ハッシュ テーブル内のキーとして使用できます。

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="httpWebRequest.GetObjectData (serializationInfo, streamingContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 含まれる任意のオブジェクト、<xref:System.Runtime.Serialization.SerializationInfo>自動的に追跡され、フォーマッタがシリアル化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRequestStream">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public override System.IO.Stream GetRequestStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IO.Stream GetRequestStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRequestStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::IO::Stream ^ GetRequestStream();" />
      <MemberSignature Language="F#" Value="override this.GetRequestStream : unit -&gt; System.IO.Stream" Usage="httpWebRequest.GetRequestStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを使用してデータを送信するストリームを返します、<xref:System.Net.HttpWebRequest>します。 後に、<xref:System.IO.Stream>オブジェクトが返されたを使用してデータを送信することができます、<xref:System.Net.HttpWebRequest>を使用して、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType>メソッド。  
  
 値を設定する必要がある場合、<xref:System.Net.HttpWebRequest.ContentLength%2A>ストリームを取得する前に、プロパティ、し、これを行う必要があります。  
  
 呼び出す必要があります、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、接続から実行されるアプリケーションをします。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出す場合、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを使用する必要がある、<xref:System.Net.HttpWebRequest.GetResponse%2A>応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>ストリーム インスタンスを返すメソッド。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
または 
この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「[.NET Compact Framework のネットワーク プログラミング](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx)」をご覧ください。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="GetRequestStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetRequestStream (out System.Net.TransportContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetRequestStream([out] class System.Net.TransportContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequestStream (ByRef context As TransportContext) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetRequestStream([Runtime::InteropServices::Out] System::Net::TransportContext ^ % context);" />
      <MemberSignature Language="F#" Value="override this.GetRequestStream :  -&gt; System.IO.Stream" Usage="httpWebRequest.GetRequestStream context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Net.TransportContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
        <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
        <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを使用してデータを送信するストリームを返します、<xref:System.Net.HttpWebRequest>し、出力、<xref:System.Net.TransportContext>ストリームに関連付けられています。 後に、<xref:System.IO.Stream>オブジェクトが返されたを使用してデータを送信することができます、<xref:System.Net.HttpWebRequest>を使用して、<xref:System.IO.Stream.Write%2A?displayProperty=nameWithType>メソッド。  
  
 拡張保護付き統合 Windows 認証を使用する一部のアプリケーションで使用されるトランスポート層をクエリできるようにする必要があります<xref:System.Net.HttpWebRequest>基になる TLS チャネルからチャネル バインディング トークン (CBT) を取得するためです。 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドは要求本文を使用する HTTP メソッドのこの情報へのアクセスを提供します (`POST`と`PUT`要求)。 これは、アプリケーションが独自の認証の実装は、CBT へのアクセスを必要がある場合にのみ必要です。  
  
 値を設定する必要がある場合、<xref:System.Net.HttpWebRequest.ContentLength%2A>ストリームを取得する前に、プロパティ、し、これを行う必要があります。  
  
 呼び出す必要があります、<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>メソッドは、ストリームを閉じ、再利用するための接続を解放します。 ストリームを閉じると、接続から実行されるアプリケーションをします。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出す場合、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを使用する必要がある、<xref:System.Net.HttpWebRequest.GetResponse%2A>応答を取得します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが <see cref="T:System.IO.Stream" /> を取得できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
- または - 
この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="T:System.Net.TransportContext" />
        <altmember cref="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md">統合 Windows 認証と拡張保護</related>
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="public override System.Net.WebResponse GetResponse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Net.WebResponse GetResponse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.GetResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetResponse () As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Net::WebResponse ^ GetResponse();" />
      <MemberSignature Language="F#" Value="override this.GetResponse : unit -&gt; System.Net.WebResponse" Usage="httpWebRequest.GetResponse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インターネット リソースからの応答を返します。</summary>
        <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドを返します。 を<xref:System.Net.WebResponse>インターネット リソースからの応答を格納しているオブジェクト。 実際のインスタンスが返される、 <xref:System.Net.HttpWebResponse>、およびアクセス HTTP 固有のプロパティには、そのクラス型にキャストできます。  
  
 A<xref:System.Net.ProtocolViolationException>プロパティに設定されている場合に、いくつかのケースでスローされた、<xref:System.Net.HttpWebRequest>クラスが競合しています。 この例外は、アプリケーションが設定されている場合に発生します。、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティおよび<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティを`true`、し、HTTP GET 要求を送信します。 この例外は、アプリケーションが、これはサポートされていませんのみ HTTP 1.0 プロトコルをサポートしているサーバーにチャンクを送信しようとした場合に発生します。 この例外は、アプリケーション設定がないデータを送信しようとする場合に発生します、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティまたは<xref:System.Net.HttpWebRequest.SendChunked%2A>は`false`バッファリングを無効にすると、キープア ライブ接続で (、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティは`true`)。`.`  
  
> [!CAUTION]
>  呼び出す必要があります、<xref:System.Net.HttpWebResponse.Close%2A>ストリームを閉じるし、接続を解放するメソッド。 そのために失敗した接続が不足するアプリケーションがあります。  
  
 POST メソッドを使用する場合は、要求ストリームを取得して、ポストするデータを書き込むし、ストリームを閉じる必要があります。 このメソッドは、投稿にコンテンツの待機をブロックします。タイムアウトが設定されていないコンテンツ、呼び出しスレッドは無期限にブロックを指定しない場合。  
  
> [!NOTE]
>  複数回呼び出す<xref:System.Net.HttpWebRequest.GetResponse%2A>同じ応答オブジェクトを返す要求を再発行されません。  
  
> [!NOTE]
>  アプリケーションでは、特定の要求の同期および非同期のメソッドを組み合わせることはできません。 呼び出す場合、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドを使用する必要がある、<xref:System.Net.HttpWebRequest.GetResponse%2A>応答を取得します。  
  
> [!NOTE]
>  場合、<xref:System.Net.WebException>がスローされると、使用して、<xref:System.Net.WebException.Response%2A>と<xref:System.Net.WebException.Status%2A>サーバーからの応答を確認するには、例外のプロパティ。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。[ネットワークのトレースを .NET Framework で](~/docs/framework/network-programming/network-tracing.md)します。  
  
> [!NOTE]
>  セキュリティ上の理由から、cookie が既定で無効になります。 クッキーを使用する場合を使用して、 <xref:System.Net.HttpWebRequest.CookieContainer%2A> cookie を有効にするプロパティ。  
  
   
  
## Examples  
 次のコード例では、要求に対する応答を取得します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。  
  
または 
 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" />です。</exception>
        <exception cref="T:System.Net.ProtocolViolationException"><see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。  
  
- または - 
 <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。  
  
- または - 
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドが 呼び出されています。  
  
または 
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> は 0 よりも大きい値に設定されていますが、保証されたデータすべてをアプリケーションが書き込むことができません。</exception>
        <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、この要求にはサーバーに送信されるデータが含まれています。 データを送信する要求には、キャッシュを使用できません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
        <exception cref="T:System.Net.WebException"><see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。  
  
または 
要求のタイムアウト期間の期限が切れました。  
  
または 
この要求の処理中にエラーが発生しました。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
      </Docs>
    </Member>
    <Member MemberName="HaveResponse">
      <MemberSignature Language="C#" Value="public virtual bool HaveResponse { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HaveResponse" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.HaveResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HaveResponse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HaveResponse { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HaveResponse : bool" Usage="System.Net.HttpWebRequest.HaveResponse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースから応答が受信されたかどうかを示す値を取得します。</summary>
        <value>応答を受信した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例のチェック、<xref:System.Net.HttpWebRequest.HaveResponse%2A>プロパティをインターネット リソースから応答が受信されているかどうかを判断します。  
  
 [!code-cpp[Httpwebrequest_HaveResponse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CPP/httpwebrequest_haveresponse.cpp#1)]
 [!code-csharp[Httpwebrequest_HaveResponse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/CS/httpwebrequest_haveresponse.cs#1)]
 [!code-vb[Httpwebrequest_HaveResponse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_HaveResponse/VB/httpwebrequest_haveresponse.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public override System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Net.WebHeaderCollection with get, set" Usage="System.Net.HttpWebRequest.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP ヘッダーを構成する名前と値のペアのコレクションを指定します。</summary>
        <value>HTTP 要求のヘッダーを構成する名前と値のペアを格納している <see cref="T:System.Net.WebHeaderCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Headers%2A>コレクションには、要求に関連付けられたプロトコル ヘッダーが含まれています。 次の表に、HTTP ヘッダーに格納されていない、<xref:System.Net.HttpWebRequest.Headers%2A>コレクションが、システムによって設定するかのプロパティまたはメソッドによって設定します。  
  
|Header|によってを設定します。|  
|------------|------------|  
|そのまま使用します。|設定、<xref:System.Net.HttpWebRequest.Accept%2A>プロパティ。|  
|接続|設定、<xref:System.Net.HttpWebRequest.Connection%2A>プロパティと<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティ。|  
|コンテンツの長さ|設定、<xref:System.Net.HttpWebRequest.ContentLength%2A>プロパティ。|  
|Content-Type|設定、<xref:System.Net.HttpWebRequest.ContentType%2A>プロパティ。|  
|予想されます。|設定、<xref:System.Net.HttpWebRequest.Expect%2A>プロパティ。|  
|日付|設定、<xref:System.Net.HttpWebRequest.Date%2A>プロパティ。|  
|ホスト|設定、<xref:System.Net.HttpWebRequest.Host%2A>プロパティ。|  
|場合の変更-以降|設定、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティ。|  
|範囲|設定、<xref:System.Net.HttpWebRequest.AddRange%2A>メソッド。|  
|Referer|設定、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティ。|  
|転送エンコード|設定、<xref:System.Net.HttpWebRequest.TransferEncoding%2A>プロパティ (、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティは true である必要があります)。|  
|ユーザー エージェント|設定、<xref:System.Net.HttpWebRequest.UserAgent%2A>プロパティ。|  
  
 <xref:System.Net.WebHeaderCollection.Add%2A>メソッドがスローされます、<xref:System.ArgumentException>これらの保護されているヘッダーのいずれかを設定しようとする場合。  
  
 変更、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティを呼び出すことによって、要求が開始された後<xref:System.Net.HttpWebRequest.GetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、または<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。  
  
 Web サーバーおよびキャッシュ可能性がありますを変更または Web 要求にヘッダーを追加するために、ヘッダーの値を変更せずが残ることを想定する必要があります。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティをコンソールに HTTP ヘッダーの名前/値ペアを印刷します。  
  
 [!code-cpp[HttpWebRequest_Headers#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Headers/CPP/httpwebrequest_headers.cpp#1)]
 [!code-csharp[HttpWebRequest_Headers#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Headers/CS/httpwebrequest_headers.cs#1)]
 [!code-vb[HttpWebRequest_Headers#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Headers/VB/httpwebrequest_headers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Host" />
      <MemberSignature Language="VB.NET" Value="Public Property Host As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Host { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Host : string with get, set" Usage="System.Net.HttpWebRequest.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求 URI に依存しない HTTP 要求で使用する Host ヘッダー値を取得または設定します。</summary>
        <value>HTTP 要求の Host ヘッダーの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Host%2A>ホスト要求 URI から独立して HTTP 要求で使用するヘッダーの値を設定するプロパティを使用できます。 <xref:System.Net.HttpWebRequest.Host%2A>プロパティは、ホスト名と、省略可能なポート番号で構成できます。 ポートの情報がない場合、ホスト ヘッダーは、既定のポート (ポート 80、HTTP URL の例では)、要求されたサービスを意味します。  
  
 ホストとポートを指定する形式は、IETF によって発行された RFC2616 のセクション 14.23 の規則に従う必要があります。 これらの要件に準拠する、ポート 8080 を指定する例として次の値があります、<xref:System.Net.HttpWebRequest.Host%2A>プロパティ。  
  
 `www.contoso.com:8080`  
  
 使用して、<xref:System.Net.HttpWebRequest.Host%2A>カスタム ホスト ヘッダーの値を明示的に指定するプロパティは、キャッシュの領域、cookie、および認証にも影響します。 アプリケーションでは、特定の URI プレフィックスの資格情報を提供、ときに、アプリケーションを URI にターゲット サーバーではなく、ホスト ヘッダーの値を含む URI を使用することを確認する必要があります。 リソースをキャッシュする場合に使用されるキーは、要求 URI ではなく、ホスト ヘッダーの値を使用します。 Cookie が格納されている、<xref:System.Net.CookieContainer>とサーバーのドメイン名によって論理的にグループ化します。 アプリケーションでは、ホスト ヘッダーを指定する場合、この値は、ドメインとして使用します。  
  
 場合、<xref:System.Net.HttpWebRequest.Host%2A>プロパティが設定されていない、HTTP 要求で使用するホスト ヘッダー値は、要求 URI に基づいています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Host ヘッダーを <see langword="null" /> に設定することはできません。</exception>
        <exception cref="T:System.ArgumentException">ホスト ヘッダーを無効な値には設定できません。</exception>
        <exception cref="T:System.InvalidOperationException">Host ヘッダーは、<see cref="T:System.Net.HttpWebRequest" /> の送信が既に開始された後には設定できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IfModifiedSince">
      <MemberSignature Language="C#" Value="public DateTime IfModifiedSince { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime IfModifiedSince" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.IfModifiedSince" />
      <MemberSignature Language="VB.NET" Value="Public Property IfModifiedSince As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime IfModifiedSince { DateTime get(); void set(DateTime value); };" />
      <MemberSignature Language="F#" Value="member this.IfModifiedSince : DateTime with get, set" Usage="System.Net.HttpWebRequest.IfModifiedSince" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="If-Modified-Since" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="If-Modified-Since" /> HTTP ヘッダーの内容を格納する <see cref="T:System.DateTime" />。 既定値は、現在の日付と時刻です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティは、標準<xref:System.DateTime?displayProperty=nameWithType>オブジェクトし、含めることができます、<xref:System.DateTimeKind?displayProperty=nameWithType>フィールド<xref:System.DateTimeKind.Local?displayProperty=nameWithType>、 <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>、または<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>します。 使用する場合は、時間の任意の種類を設定することができます、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティ。 場合<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>を設定または取得するには、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティがあると見なされます<xref:System.DateTimeKind.Local?displayProperty=nameWithType>(ローカル時刻)。  
  
 内のクラス、<xref:System.Net>名前空間常に書き出すこと、 <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> gmt 時刻 (Utc) 形式を使用して標準の形式で転送中にネットワーク上でのプロパティ。  
  
 場合、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティに設定されて<xref:System.DateTime.MinValue?displayProperty=nameWithType>、`If-Modified-Since`から HTTP のヘッダーが削除された、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティおよび<xref:System.Net.WebHeaderCollection>します。  
  
 場合、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティは<xref:System.DateTime.MinValue?displayProperty=nameWithType>、これが示す、`If-Modified-Since`に HTTP ヘッダーが含まれていない、<xref:System.Net.HttpWebRequest.Headers%2A>プロパティと<xref:System.Net.WebHeaderCollection>します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例のチェック、<xref:System.Net.HttpWebRequest.IfModifiedSince%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CPP/httpwebrequest_ifmodifiedsince.cpp#1)]
 [!code-csharp[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/CS/httpwebrequest_ifmodifiedsince.cs#1)]
 [!code-vb[HttpWebRequest_IfModifiedSince#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_IfModifiedSince/VB/httpwebrequest_ifmodifiedsince.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.KeepAlive" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAlive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepAlive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.KeepAlive : bool with get, set" Usage="System.Net.HttpWebRequest.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの永続的な接続を行うかどうかを示す値を取得または設定します。</summary>
        <value>値 Keep-alive を持つ <see langword="Connection" /> HTTP ヘッダーをインターネット リソースへの要求に含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定`true`を送信する、 `Connection` HTTP ヘッダー値 keep-alive を使用します。 アプリケーションを使用して<xref:System.Net.HttpWebRequest.KeepAlive%2A>に永続的接続の設定を示します。 ときに、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティは`true`アプリケーションがそれらをサポートするサーバーに永続的な接続を行います。  
  
> [!NOTE]
>  Http/1.1 を使用するとキープ アライブが既定でオンです。 設定<xref:System.Net.HttpWebRequest.KeepAlive%2A>に`false`送信中に発生する可能性があります、`Connection: Close`ヘッダー、サーバーにします。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティを`false`インターネット リソースに永続的な接続を確立するようにします。  
  
 [!code-cpp[HttpWebRequest_Connection#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Connection/CPP/httpwebrequest_connection.cpp#1)]
 [!code-csharp[HttpWebRequest_Connection#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Connection/CS/httpwebrequest_connection.cs#1)]
 [!code-vb[HttpWebRequest_Connection#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Connection/VB/httpwebrequest_connection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumAutomaticRedirections">
      <MemberSignature Language="C#" Value="public int MaximumAutomaticRedirections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumAutomaticRedirections" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumAutomaticRedirections As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumAutomaticRedirections { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumAutomaticRedirections : int with get, set" Usage="System.Net.HttpWebRequest.MaximumAutomaticRedirections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求によって実行されるリダイレクトの最大数を取得または設定します。</summary>
        <value>要求によって実行されるリダイレクト応答の最大数。 既定値は 50 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A>プロパティの場合は、次に、要求のリダイレクトの最大数を設定、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>プロパティは`true`します。  
  
   
  
## Examples  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumResponseHeadersLength">
      <MemberSignature Language="C#" Value="public int MaximumResponseHeadersLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumResponseHeadersLength" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumResponseHeadersLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumResponseHeadersLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumResponseHeadersLength : int with get, set" Usage="System.Net.HttpWebRequest.MaximumResponseHeadersLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO("Use this")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答ヘッダーの許容最大長を取得または設定します。</summary>
        <value>応答ヘッダーの長さ (KB 単位、1 KB = 1024 バイト)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 応答ヘッダーの長さには、応答のステータス行と HTTP プロトコルの一部として受信したすべての余分な制御文字が含まれています。 値の-1 の場合は、応答ヘッダーに制限は適用されません。値 0 は、すべての要求が失敗することを意味します。  
  
 場合、<xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A>プロパティが明示的に設定されていない、既定値はの値、<xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>プロパティ。  
  
 値が受信した応答ヘッダーの長さを超えたかどうか、<xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A>プロパティ、<xref:System.Net.HttpWebRequest.EndGetResponse%2A>または<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドがスローされます、<xref:System.Net.WebException>で、<xref:System.Net.WebException.Status%2A>プロパティに設定<xref:System.Net.WebExceptionStatus.MessageLengthLimitExceeded>します。  
  
   
  
## Examples  
 次のコード例では、このプロパティの値を設定します。  
  
 [!code-cpp[NCLResponse1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLResponse1/CPP/httpwebrequest1.cpp#1)]
 [!code-csharp[NCLResponse1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLResponse1/CS/httpwebrequest1.cs#1)]
 [!code-vb[NCLResponse1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLResponse1/VB/httpwebrequest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">プロパティは、要求が送信された後に設定されます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public string MediaType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MediaType" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.MediaType" />
      <MemberSignature Language="VB.NET" Value="Public Property MediaType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MediaType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MediaType : string with get, set" Usage="System.Net.HttpWebRequest.MediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求のメディア タイプを取得または設定します。</summary>
        <value>要求のメディア タイプ。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Net.HttpWebRequest.MediaType%2A>プロパティに影響、<xref:System.Net.HttpWebResponse.CharacterSet%2A>プロパティ。 設定すると、<xref:System.Net.HttpWebRequest.MediaType%2A>要求に対応するメディアの種類は、応答で返される文字セットの一覧から選択`Content-type`HTTP ヘッダー。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public override string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Method" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Method : string with get, set" Usage="System.Net.HttpWebRequest.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するメソッドを取得または設定します。</summary>
        <value>インターネット リソースと通信するために使用する要求メソッド。 既定値は GET です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Method%2A>プロパティは、HTTP 1.1 プロトコルの動詞のいずれかに設定することができます。GET、ヘッド、POST、PUT、トレース、またはオプションを削除します。  
  
 場合、 <xref:System.Net.HttpWebRequest.ContentLength%2A> -1 以外の値に設定されて、<xref:System.Net.HttpWebRequest.Method%2A>プロパティは、データをアップロードするプロトコルのプロパティを設定する必要があります。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.Method%2A>プロパティを投稿します。  
  
 [!code-cpp[HttpWebRequest_ContentLength#4](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CPP/httpwebrequest_contentlength.cpp#4)]
 [!code-csharp[HttpWebRequest_ContentLength#4](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ContentLength/CS/httpwebrequest_contentlength.cs#4)]
 [!code-vb[HttpWebRequest_ContentLength#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ContentLength/VB/httpwebrequest_contentlength.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">メソッドが提供されていません。  
  
- または - 
メソッドの文字列に正しくない文字が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pipelined">
      <MemberSignature Language="C#" Value="public bool Pipelined { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pipelined" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Pipelined" />
      <MemberSignature Language="VB.NET" Value="Public Property Pipelined As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Pipelined { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Pipelined : bool with get, set" Usage="System.Net.HttpWebRequest.Pipelined" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへの要求をパイプライン処理するかどうかを示す値を取得または設定します。</summary>
        <value>要求をパイプライン処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを使用して、<xref:System.Net.HttpWebRequest.Pipelined%2A>プロパティをパイプライン接続に対する設定を示します。 ときに<xref:System.Net.HttpWebRequest.Pipelined%2A>は`true`アプリケーションがパイプライン接続をサポートしているサーバーにします。  
  
 パイプラインの接続を確立する場合にのみ、<xref:System.Net.HttpWebRequest.KeepAlive%2A>プロパティも`true`します。  
  
   
  
## Examples  
 次のコード例の値を表示する、<xref:System.Net.HttpWebRequest.Pipelined%2A>コンソールへのプロパティ。  
  
 [!code-cpp[HttpWebRequest_PipeLined#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CPP/httpwebrequest_pipelined.cpp#1)]
 [!code-csharp[HttpWebRequest_PipeLined#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_PipeLined/CS/httpwebrequest_pipelined.cs#1)]
 [!code-vb[HttpWebRequest_PipeLined#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_PipeLined/VB/httpwebrequest_pipelined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreAuthenticate">
      <MemberSignature Language="C#" Value="public override bool PreAuthenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreAuthenticate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.PreAuthenticate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property PreAuthenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool PreAuthenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PreAuthenticate : bool with get, set" Usage="System.Net.HttpWebRequest.PreAuthenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求で Authorization ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
        <value>認証が行われた後で、要求と共に HTTP Authorization ヘッダーを送信するには <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 特定のクライアント要求の後<xref:System.Uri>が正常に認証された場合<xref:System.Net.HttpWebRequest.PreAuthenticate%2A>は`true`と資格情報を入力、Authorization ヘッダーは、いずれかに各要求と一緒に送信される<xref:System.Uri>固有に一致する<xref:System.Uri>最後のスラッシュの前までです。 そのため、クライアントの要求が正常に認証する特定の場合<xref:System.Uri>次を含みます。  
  
 `http://www.contoso.com/firstpath/`  
  
 事前認証の承認ヘッダーは、次のいずれかに各要求と一緒に送信される、<xref:System.Uri>インスタンス。  
  
 `http://www.contoso.com/firstpath/`  
  
 `http://www.contoso.com/firstpath/default`  
  
 `http://www.contoso.com/firstpath/default.html`  
  
 `http://www.contoso.com/firstpath/sample.html`  
  
 ただし、Authorization ヘッダーが要求と共に送信されません、次のいずれかに<xref:System.Uri>インスタンス。  
  
 `http://www.contoso.com/`  
  
 `http://www.contoso.com/firstpath`  
  
 `http://www.contoso.com/secondpath/`  
  
 指定するには、クライアントが要求した場合<xref:System.Uri>が正常に認証されると、要求は標準認証手順を使用します。  
  
 最初の要求を除き、<xref:System.Net.WebRequest.PreAuthenticate%2A>プロパティには、それ以降の要求の認証情報を送信するかどうかを示します、<xref:System.Uri>特定と一致する<xref:System.Uri>するを待たなくても最後スラッシュの前までサーバーで求められています。  
  
 クライアントとサーバー間の次のダイアログ ボックスは、このプロパティの効果を示しています。 ダイアログ ボックスでは、基本認証では使用を前提としています。  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> `false`:  
  
 クライアント:SomeUrl を取得します。  
  
 サーバー:401 Www-authenticate Basic  
  
 クライアント:Authorization ヘッダーを取得します。  
  
 サーバー:200 OK  
  
 クライアント:SomeUrl を取得します。  
  
 サーバー:401 Www-authenticate Basic  
  
 クライアント:Authorization ヘッダーを取得します。  
  
 サーバー:200 OK  
  
 <xref:System.Net.HttpWebRequest.PreAuthenticate%2A> `true`:  
  
 クライアント:SomeUrl を取得します。  
  
 サーバー:401 Www-authenticate Basic  
  
 クライアント:Authorization ヘッダーを取得します。  
  
 サーバー:200 OK  
  
 クライアント:Authorization ヘッダーで someUrl を取得します。  
  
 認証スキームの事前認証がサポートされない場合、は、このプロパティの値は無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public Version ProtocolVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ProtocolVersion" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ProtocolVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtocolVersion As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Version ^ ProtocolVersion { Version ^ get(); void set(Version ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ProtocolVersion : Version with get, set" Usage="System.Net.HttpWebRequest.ProtocolVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用する HTTP バージョンを取得または設定します。</summary>
        <value>要求に対して使用する HTTP バージョン。 既定値は、<see cref="F:System.Net.HttpVersion.Version11" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest>クラスは、バージョン 1.0 および 1.1 の HTTP のみをサポートしています。 設定<xref:System.Net.HttpWebRequest.ProtocolVersion%2A>を別のバージョンには、例外をスローします。  
  
> [!NOTE]
>  現在の要求の HTTP バージョンを設定するには、使用、<xref:System.Net.HttpVersion.Version10>と<xref:System.Net.HttpVersion.Version11>のフィールド、<xref:System.Net.HttpVersion>クラス。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.ProtocolVersion%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CPP/httpwebrequest_protocolversion.cpp#1)]
 [!code-csharp[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/CS/httpwebrequest_protocolversion.cs#1)]
 [!code-vb[HttpWebRequest_ProtocolVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_ProtocolVersion/VB/httpwebrequest_protocolversion.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">HTTP バージョンが 1.0 または 1.1 以外の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public override System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy with get, set" Usage="System.Net.HttpWebRequest.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するプロキシ情報を取得または設定します。</summary>
        <value>要求に対するプロキシで使用する <see cref="T:System.Net.IWebProxy" /> オブジェクト。 既定値は <see cref="P:System.Net.GlobalProxySelection.Select" /> プロパティを呼び出して設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Proxy%2A>プロパティを識別、<xref:System.Net.WebProxy>を使用してインターネット リソースへの要求を処理するオブジェクト。 プロキシを使用しないことを指定するには、設定、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティによって返されるプロキシ インスタンスを<xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=nameWithType>メソッド。  
  
 ローカル コンピューターまたはアプリケーション構成ファイルは既定のプロキシを使用することを指定できます。 場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティを指定するからプロキシ設定し、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは、ローカル コンピューターまたはアプリケーション構成ファイルを上書き、<xref:System.Net.HttpWebRequest>インスタンスが指定されたプロキシ設定を使用します。 構成ファイルでプロキシが指定されていない場合、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティは指定されていない、<xref:System.Net.HttpWebRequest>クラスは、ローカル コンピューター上の Internet Explorer から継承されたプロキシ設定を使用します。 Internet Explorer のプロキシ設定がない場合は、要求がサーバーに直接送信されます。  
  
 <xref:System.Net.HttpWebRequest>クラス解析ワイルドカード文字を含むプロキシ バイ パス一覧から継承された Internet Explorer と同じバイ パス一覧が Internet Explorer によって直接解析します。 たとえば、<xref:System.Net.HttpWebRequest>クラスでは「nt *」Internet Explorer からのバイパス リストを解析の正規表現として"nt。\*"。 これの URL"`http://nt.com`"を使用してプロキシをバイパスは、<xref:System.Net.HttpWebRequest>クラスと Internet Explorer を使用します。  
  
 <xref:System.Net.HttpWebRequest>クラスは、ローカルのプロキシのバイパスをサポートしています。 クラスには、次の条件のいずれかが満たされた場合は、ローカルでの保存先と見なされます。  
  
-   先には、フラットな名前 (URL にドットがない) が含まれています。  
  
-   先には、ループバック アドレスが含まれています (<xref:System.Net.IPAddress.Loopback>または<xref:System.Net.IPAddress.IPv6Loopback>) または変換先が含まれている、<xref:System.Net.IPAddress>ローカル コンピューターに割り当てられています。  
  
-   変換先のドメイン サフィックスが、ローカル コンピューターのドメイン サフィックスと一致する (<xref:System.Net.NetworkInformation.IPGlobalProperties.DomainName%2A>)。  
  
 変更、<xref:System.Net.HttpWebRequest.Proxy%2A>プロパティを呼び出すことによって、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、または<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。 Proxy 要素については、次を参照してください[ \&lt; defaultProxy\&gt;。要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/defaultproxy-element-network-settings.md)します。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Net.HttpWebRequest.Proxy%2A>メソッド要求のプロキシ情報を取得します。  
  
 [!code-cpp[Httpwebrequest_proxy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Httpwebrequest_proxy/CPP/httpwebrequest_proxy.cpp#1)]
 [!code-csharp[Httpwebrequest_proxy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Httpwebrequest_proxy/CS/httpwebrequest_proxy.cs#1)]
 [!code-vb[Httpwebrequest_proxy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Httpwebrequest_proxy/VB/httpwebrequest_proxy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Net.HttpWebRequest.Proxy" /> が <see langword="null" /> に設定されます。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> を呼び出すことにより要求が開始されました。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された操作に対するアクセス許可がありません。</exception>
        <permission cref="T:System.Net.WebPermission">取得または設定する、<see cref="P:System.Net.HttpWebRequest.Proxy" />プロパティ。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/9d663c4b-07b4-4f6f-9b12-efbd3630354f">DefaultProxy 要素 (ネットワーク設定)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bb707c72-eed2-4a82-8800-c9e68df2fd4f">構成 (インターネット アプリケーションを)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/353c0a8b-4cee-44f6-8e65-60e286743df9">プロキシの構成</related>
        <related type="Article" href="https://msdn.microsoft.com/library/fcd9c3bd-93de-4c92-8ff3-837327ad18de">自動プロキシ検出</related>
      </Docs>
    </Member>
    <Member MemberName="ReadWriteTimeout">
      <MemberSignature Language="C#" Value="public int ReadWriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadWriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadWriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadWriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadWriteTimeout : int with get, set" Usage="System.Net.HttpWebRequest.ReadWriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリームへの書き込み時またはストリームからの読み取り時のタイムアウト (ミリ秒単位) を取得または設定します。</summary>
        <value>書き込みまたは読み取りがタイムアウトするまでのミリ秒単位の時間。既定値は、300,000 ミリ秒 (5 分) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A>によって返されるストリームに書き込むときに、プロパティが使用される、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドまたはによって返されるストリームからの読み取り、<xref:System.Net.HttpWebResponse.GetResponseStream%2A>メソッド。  
  
 具体的には、<xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A>プロパティは、タイムアウトの値は、制御、<xref:System.IO.Stream.Read%2A>メソッドによって返されるストリームの読み取りに使用すると、<xref:System.Net.HttpWebResponse.GetResponseStream%2A>メソッドをおよび、 <xref:System.IO.Stream.Write%2A> によって返されるストリームに書き込むために使用するメソッド<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッド。  
  
 要求が完了するまで待機する時間を指定するには、使用、<xref:System.Net.HttpWebRequest.Timeout%2A>プロパティ。  
  
   
  
## Examples  
 <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> プロパティを設定する方法を次のコード例に示します。  
  
 [!code-csharp[Classic HttpWebRequest Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest Example/CS/source.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求が既に送信されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作に指定された値は 0 以下であり、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.Timeout" />
      </Docs>
    </Member>
    <Member MemberName="Referer">
      <MemberSignature Language="C#" Value="public string Referer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Referer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Referer" />
      <MemberSignature Language="VB.NET" Value="Public Property Referer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Referer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Referer : string with get, set" Usage="System.Net.HttpWebRequest.Referer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Referer" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Referer" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>プロパティは`true`、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティは、要求が別のサイトにリダイレクトされたときに自動的に設定されます。  
  
 消去する、 `Referer` HTTP のヘッダーを設定、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティを`null`します。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.Referer%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_Referer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Referer/CPP/httpwebrequest_referer.cpp#1)]
 [!code-csharp[HttpWebRequest_Referer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Referer/CS/httpwebrequest_referer.cs#1)]
 [!code-vb[HttpWebRequest_Referer#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Referer/VB/httpwebrequest_referer.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUri">
      <MemberSignature Language="C#" Value="public override Uri RequestUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri RequestUri" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.RequestUri" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property RequestUri As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Uri ^ RequestUri { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestUri : Uri" Usage="System.Net.HttpWebRequest.RequestUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求の元の URI (Uniform Resource Identifier) を取得します。</summary>
        <value><see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドに渡されたインターネット リソースの URI を格納している <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri>オブジェクトに渡される<xref:System.Net.HttpWebRequest>への呼び出しによって<xref:System.Net.WebRequest.Create%2A?displayProperty=nameWithType>します。  
  
 次のリダイレクト ヘッダーが変更されませんが、<xref:System.Net.HttpWebRequest.RequestUri%2A>プロパティ。 要求に応答した実際の URI を取得するには、確認、<xref:System.Net.HttpWebRequest.Address%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Net.HttpWebRequest>オブジェクト`req`の値を設定は、要求を満たすために別の場所にリダイレクトされ、`hasChanged`変数を`true`要求がリダイレクトされるそれ以外の場合。`hasChanged`に設定されている`false`します。  
  
 [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/CS/source.cs#1)]
 [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpWebRequest.RequestUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendChunked">
      <MemberSignature Language="C#" Value="public bool SendChunked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendChunked" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SendChunked" />
      <MemberSignature Language="VB.NET" Value="Public Property SendChunked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SendChunked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SendChunked : bool with get, set" Usage="System.Net.HttpWebRequest.SendChunked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット リソースへセグメント単位でデータを送信するかどうかを示す値を取得または設定します。</summary>
        <value>インターネット リソースへセグメント単位でデータを送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Net.HttpWebRequest.SendChunked%2A>は`true`要求は、セグメント内のインターネット リソースにデータを送信します。 インターネット リソースには、チャンクされたデータの受信をサポートする必要があります。  
  
 変更、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティを呼び出すことによって、要求が開始された後、 <xref:System.Net.HttpWebRequest.GetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>、 <xref:System.Net.HttpWebRequest.GetResponse%2A>、または<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッドがスローされます、<xref:System.InvalidOperationException>します。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティを`true`インターネット リソースへセグメント単位でデータを送信できるようにします。  
  
 [!code-cpp[HttpWebRequest_SendChunked#2](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CPP/httpwebrequest_sendchunked.cpp#2)]
 [!code-csharp[HttpWebRequest_SendChunked#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_SendChunked/CS/httpwebrequest_sendchunked.cs#2)]
 [!code-vb[HttpWebRequest_SendChunked#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_SendChunked/VB/httpwebrequest_sendchunked.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerCertificateValidationCallback">
      <MemberSignature Language="C#" Value="public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerCertificateValidationCallback As RemoteCertificateValidationCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::RemoteCertificateValidationCallback ^ ServerCertificateValidationCallback { System::Net::Security::RemoteCertificateValidationCallback ^ get(); void set(System::Net::Security::RemoteCertificateValidationCallback ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServerCertificateValidationCallback : System.Net.Security.RemoteCertificateValidationCallback with get, set" Usage="System.Net.HttpWebRequest.ServerCertificateValidationCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.RemoteCertificateValidationCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー証明書を検証するコールバック関数を取得または設定します。</summary>
        <value>サーバー証明書を検証するコールバック関数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定値は、コールバック関数が設定されないこと、および<xref:System.Net.HttpWebRequest.ServerCertificateValidationCallback%2A>プロパティは`null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.ServicePoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServicePoint As ServicePoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ServicePoint ^ ServicePoint { System::Net::ServicePoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServicePoint : System.Net.ServicePoint" Usage="System.Net.HttpWebRequest.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求に対して使用するサービス ポイントを取得します。</summary>
        <value>インターネット リソースへのネットワーク接続を表す <see cref="T:System.Net.ServicePoint" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.ServicePoint.Address%2A?displayProperty=nameWithType>プロパティが異なる場合がある<xref:System.Net.HttpWebRequest.Address%2A?displayProperty=nameWithType>場合は、要求がリダイレクトされます。  
  
   
  
## Examples  
 [!code-cpp[System.Net.ServicePoint#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.ServicePoint/CPP/servicepoint.cpp#6)]
 [!code-csharp[System.Net.ServicePoint#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.ServicePoint/CS/servicepoint.cs#6)]
 [!code-vb[System.Net.ServicePoint#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.ServicePoint/VB/servicepoint.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsCookieContainer">
      <MemberSignature Language="C#" Value="public virtual bool SupportsCookieContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsCookieContainer" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.SupportsCookieContainer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsCookieContainer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsCookieContainer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsCookieContainer : bool" Usage="System.Net.HttpWebRequest.SupportsCookieContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求が <see cref="T:System.Net.CookieContainer" /> をサポートするかどうかを示す値を取得します。</summary>
        <value>要求が <see cref="T:System.Net.CookieContainer" /> をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo serializationInfo, valuetype System.Runtime.Serialization.StreamingContext streamingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="streamingContext" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象のオブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 含まれる任意のオブジェクト、<xref:System.Runtime.Serialization.SerializationInfo>自動的に追跡され、フォーマッタがシリアル化します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public override int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Net.HttpWebRequest.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドと <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドのタイムアウト値 (ミリ秒単位) を取得または設定します。</summary>
        <value>要求がタイムアウトするまでのミリ秒単位の待機時間。既定値は 100,000 ミリ秒 (100 秒) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpWebRequest.Timeout%2A> 後続の同期要求が行われたミリ秒数は、<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドが、応答を待つと<xref:System.Net.HttpWebRequest.GetRequestStream%2A>メソッドは、ストリームまで待機します。 <xref:System.Net.HttpWebRequest.Timeout%2A>いないに個別に全体の要求と応答に適用されます、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>と<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドの呼び出し。 タイムアウト期間内にリソースが返されない場合、要求をスロー、<xref:System.Net.WebException>で、<xref:System.Net.WebException.Status%2A>プロパティに設定<xref:System.Net.WebExceptionStatus.Timeout?displayProperty=nameWithType>します。  
  
 <xref:System.Net.HttpWebRequest.Timeout%2A>前にプロパティを設定する必要があります、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>または<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドが呼び出されます。 変更、<xref:System.Net.HttpWebRequest.Timeout%2A>プロパティを呼び出した後、<xref:System.Net.HttpWebRequest.GetRequestStream%2A>または<xref:System.Net.HttpWebRequest.GetResponse%2A>メソッドが影響を与えません  
  
 <xref:System.Net.HttpWebRequest.Timeout%2A>プロパティが使用した非同期の要求に影響を与えません、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>または<xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>メソッド。  
  
> [!CAUTION]
>  非同期要求の場合は、クライアント アプリケーションは、独自のタイムアウト メカニズムを実装します。 例を参照してください、<xref:System.Net.HttpWebRequest.BeginGetResponse%2A>メソッド。  
  
 までの時間待ってから、読み取りまたは書き込み操作の量を指定するには、使用、<xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A>プロパティ。  
  
 ドメイン ネーム システム (DNS) クエリには、最大 15 秒を返すまたはタイムアウトをかかる場合があります。設定すると、要求には、解決を必要とするホスト名が含まれています。<xref:System.Net.FileWebRequest.Timeout%2A>値より小さい 15 秒間かかる場合があります 15 秒以上前に、<xref:System.Net.WebException>が要求のタイムアウトを示すためにスローされます。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.Timeout%2A>のプロパティ、<xref:System.Net.HttpWebRequest>オブジェクト。  
  
 [!code-cpp[HttpWebRequest_Timeout#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CPP/httpwebrequest_timeout.cpp#1)]
 [!code-csharp[HttpWebRequest_Timeout#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_Timeout/CS/httpwebrequest_timeout.cs#1)]
 [!code-vb[HttpWebRequest_Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_Timeout/VB/httpwebrequest_timeout.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満で、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
        <altmember cref="P:System.Net.HttpWebRequest.ReadWriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransferEncoding">
      <MemberSignature Language="C#" Value="public string TransferEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransferEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.TransferEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property TransferEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransferEncoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransferEncoding : string with get, set" Usage="System.Net.HttpWebRequest.TransferEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="Transfer-encoding" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="Transfer-encoding" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定する前に、<xref:System.Net.HttpWebRequest.TransferEncoding%2A>プロパティでは、まず、設定、<xref:System.Net.HttpWebRequest.SendChunked%2A>プロパティを`true`します。 オフにすると<xref:System.Net.HttpWebRequest.TransferEncoding%2A>に設定して`null`の値に影響を与えません<xref:System.Net.HttpWebRequest.SendChunked%2A>します。  
  
 割り当てられた値、<xref:System.Net.HttpWebRequest.TransferEncoding%2A>プロパティは、既存の内容を置き換えます。  
  
> [!NOTE]
>  このプロパティの値は <xref:System.Net.WebHeaderCollection> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> である場合に設定されます。</exception>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は "Chunked" 値に設定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAuthenticatedConnectionSharing">
      <MemberSignature Language="C#" Value="public bool UnsafeAuthenticatedConnectionSharing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeAuthenticatedConnectionSharing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeAuthenticatedConnectionSharing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeAuthenticatedConnectionSharing : bool with get, set" Usage="System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>高速 NTLM 認証された接続共有を許可するかどうかを示す値を取得または設定します。</summary>
        <value>認証された接続を確立し続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの既定値は`false`、それが原因で、現在の接続要求が完了した後、終了します。 アプリケーションは必要がありますは新しい要求を発行するたびに、認証シーケンスを移動します。  
  
 このプロパティ設定されている場合`true`認証が実行された後、応答を取得するための接続が開いたままです。 このプロパティに設定がある要求他のここでは、`true`再認証せず、接続を使用することがあります。 つまり、ユーザー A の接続が認証された場合ユーザー B が再利用 A の接続。ユーザー A の資格情報に基づいてユーザー B の要求が満たされる  
  
> [!CAUTION]
>  アプリケーションで認証されることがなく、接続を使用する可能性があります、ためにがない管理の脆弱性、システム内このプロパティを設定するときに必ず必要があります。`true`します。 アプリケーションが複数のユーザーの要求を送信する場合 (複数のユーザー アカウントの権限を借用) 依存してリソースを保護する認証に設定しないでくださいこのプロパティ`true`以下に示すように、接続グループを使用する場合。  
  
 このメカニズムを有効にする場合を検討したい場合があります、パフォーマンスの問題が発生し、アプリケーションが統合 Windows 認証での Web サーバーで実行されています。  
  
 この設定を有効にするには、セキュリティ リスクにシステムが表示されます。 設定した場合、<xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>プロパティを`true`次の予防措置を考慮してください。  
  
-   使用して、<xref:System.Net.HttpWebRequest.ConnectionGroupName%2A>プロパティを別のユーザー用の接続を管理します。 これは、認証されていないアプリケーションで、接続の潜在的な使用を回避できます。 たとえば、ユーザー A はユーザー B とは異なる一意の接続グループ名を必要があります。これは、各ユーザー アカウントの分離のレイヤーを提供します。  
  
-   可能な接続の悪用を防ぐため、保護された環境でアプリケーションを実行します。  
  
 バック エンド サーバーを制御する場合の代替として可能性がある認証の永続化をオフにします。 これほど、パフォーマンスが向上しますが、方が安全です。 詳細については、検索、MSDN ライブラリで AuthPersistence [ http://msdn.microsoft.com/library](https://msdn.microsoft.com/library)します。  
  
> [!NOTE]
>  両方<xref:System.Net.WebRequest.PreAuthenticate%2A>と<xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>に設定されている`true`、Authorization ヘッダーでは、安全でないプールから接続を使用して各要求を送信します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.WebPermission">このプロパティを設定するには、無制限の Web アクセス許可が必要です。</permission>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public override bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDefaultCredentials : bool with get, set" Usage="System.Net.HttpWebRequest.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定の資格情報が要求と共に送信されるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定`true`この要求を行ったとき<xref:System.Net.HttpWebRequest>オブジェクト認証が必要で、サーバーから要求された場合、現在ログオンしているユーザーの資格情報を使用します。 クライアント アプリケーションは、これはほとんどのシナリオでは、目的の動作です。 設定する通常、このプロパティを使用する代わりに、ASP.NET アプリケーションなど、中間層アプリケーション、<xref:System.Net.HttpWebRequest.Credentials%2A>プロパティを要求が行われる要因となったクライアントの資格情報。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpWebRequest.UserAgent" />
      <MemberSignature Language="VB.NET" Value="Public Property UserAgent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserAgent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserAgent : string with get, set" Usage="System.Net.HttpWebRequest.UserAgent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Requests</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see langword="User-agent" /> HTTP ヘッダーの値を取得または設定します。</summary>
        <value><see langword="User-agent" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。  
  
 <block subset="none" type="note"><para>  
 このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" /> に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例のセット、<xref:System.Net.HttpWebRequest.UserAgent%2A>プロパティ。  
  
 [!code-cpp[HttpWebRequest_UserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CPP/httpwebrequest_useragent.cpp#1)]
 [!code-csharp[HttpWebRequest_UserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpWebRequest_UserAgent/CS/httpwebrequest_useragent.cs#1)]
 [!code-vb[HttpWebRequest_UserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpWebRequest_UserAgent/VB/httpwebrequest_useragent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
